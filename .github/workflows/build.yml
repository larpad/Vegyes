name: Python Application Analysis & Build

on:
  push:
    branches: [ "feature/*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint bandit pytest pytest-cov safety
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --statistics
      continue-on-error: true
      
    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Check dependencies with safety
      run: |
        safety check --json > safety-report.json
      continue-on-error: true
      
    - name: Run pylint
      run: |
        pylint --output-format=json > pylint-report.json ./**/*.py
      continue-on-error: true
      
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
        
    - name: Generate combined report
      run: |
        echo "# Code Analysis Report" > analysis-report.md
        echo "## Flake8 Results" >> analysis-report.md
        flake8 . --count --exit-zero --max-complexity=10 --statistics >> analysis-report.md
        echo "## Security Issues" >> analysis-report.md
        cat bandit-report.json >> analysis-report.md
        echo "## Dependency Safety" >> analysis-report.md
        cat safety-report.json >> analysis-report.md
        echo "## Code Quality (Pylint)" >> analysis-report.md
        cat pylint-report.json >> analysis-report.md
        
    - name: Upload analysis results
      uses: actions/upload-artifact@v2
      with:
        name: code-analysis-reports
        path: |
          analysis-report.md
          bandit-report.json
          safety-report.json
          pylint-report.json
          htmlcov/
          
    - name: Create Pull Request Comment
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const analysisReport = fs.readFileSync('analysis-report.md', 'utf8');
          const issueNumber = context.issue.number;
          if (issueNumber) {
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: analysisReport
            });
          }
          
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}